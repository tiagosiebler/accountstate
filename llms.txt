This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: .github/, examples/apidoc/, docs/images/, docs/endpointFunctionList.md, test/, src/util/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
examples/
  binance-futures-usdm.ts
  bybit-futures.ts
  package.json
  tsconfig.json
src/
  lib/
    misc/
      error.ts
    types/
      events.ts
      order.ts
      position.ts
  AccountStateStore.ts
  index.ts
.eslintrc.js
.gitignore
.npmrc.template
.nvmrc
.prettierrc
jest.config.json
package.json
postBuild.sh
README.md
tsconfig.cjs.json
tsconfig.esm.json
tsconfig.json

================================================================
Files
================================================================

================
File: examples/tsconfig.json
================
{
    "extends": "../tsconfig.json",
    "compilerOptions": {
      "rootDir": "..",  // Change this to allow access to parent directory
      "outDir": "../dist/examples",
      "baseUrl": "..",  // Change this to make imports work from root
      "noEmit": true,
      "paths": {        // Add paths to help resolve imports
        "*": ["src/*"]
      }
    },
    "include": ["./**/*"],
    "exclude": ["node_modules"]
  }

================
File: src/lib/misc/error.ts
================
function hasProp<K extends PropertyKey>(
  obj: unknown,
  key: K | null | undefined,
): obj is Record<K, unknown>
⋮----
/** Try to resolve response{body{msg: string}}, or just string, or whatever */
export function sanitiseError(e: unknown): Error | unknown
⋮----
// if body, look for msg or string. Fallback to return full thing untouched

================
File: src/lib/types/events.ts
================
export interface IncomingPriceEvent {
  symbol: string;
  price: number;
}

================
File: .eslintrc.js
================


================
File: .npmrc.template
================
# This is a read token to easily acess this module in other projects. Copy this to other projects and rename it to .npmrc
# Keep this secret!!
registry=https://registry.npmjs.org/
@tsquant:registry=https://registry.npmjs.org/
//registry.npmjs.org/:_authToken=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

================
File: .prettierrc
================
{
  "singleQuote": true,
  "trailingComma": "all"
}

================
File: jest.config.json
================
{
  "rootDir": "./",
  "globals": {
    "__DEV__": true,
    "__PROD__": false
  },
  "testEnvironment": "node",
  "preset": "ts-jest",
  "verbose": true,
  "bail": false,
  "detectOpenHandles": false,
  "moduleDirectories": [
    "node_modules",
    "src",
    "test"
  ],
  "moduleFileExtensions": [
    "js",
    "json",
    "ts"
  ],
  "testMatch": [
    "**/test/**/*.test.ts?(x)"
  ],
  "testPathIgnorePatterns": [
    "node_modules/",
    "dist/",
    ".json"
  ],
  "transform": {
    "^.+\\.(t|j)s$": [
      "ts-jest",
      {
        "tsconfig": "test/tsconfig.test.json"
      }
    ]
  },
  "collectCoverageFrom": [
    "**/*.(t|j)s"
  ],
  "coverageDirectory": "../coverage",
  "coverageThreshold": {
    "global": {
      "branches": 80,
      "functions": 80,
      "lines": 50,
      "statements": -10
    }
  }
}

================
File: postBuild.sh
================
#!/bin/bash
#
#   Add package.json files to cjs/mjs subtrees
#

cat >dist/cjs/package.json <<!EOF
{
    "type": "commonjs"
}
!EOF

cat >dist/mjs/package.json <<!EOF
{
    "type": "module"
}
!EOF

find src -name '*.d.ts' -exec cp {} dist/mjs \;
find src -name '*.d.ts' -exec cp {} dist/cjs \;

================
File: examples/bybit-futures.ts
================
import {
  DefaultLogger,
  RestClientV5,
  WebsocketClient,
  WSAccountOrderV5,
  WSPositionV5,
} from 'bybit-api';
⋮----
import {
  AccountStateStore,
} from '../src/AccountStateStore.js';
import { EngineOrder } from '../src/lib/types/order.js';
import {
  EngineSimplePosition,
} from '../src/lib/types/position.js';
⋮----
// Create REST client
⋮----
// Create account state store
⋮----
// Configure logger
⋮----
// Uncomment to see more detailed logs
// console.log(JSON.stringify({ msg, context }));
⋮----
// Create WebSocket client
⋮----
/**
 * Syncs the account state by fetching positions and orders from REST API
 */
async function syncPositionsFromREST()
⋮----
// Clear existing positions and orders from state
⋮----
// Fetch wallet balance
⋮----
// Fetch all positions
⋮----
// Filter active positions (non-zero position amount)
⋮----
// Update state with active positions
⋮----
// Fetch all open orders
⋮----
// Update state with open orders
⋮----
// Summary of active positions and orders
⋮----
/**
 * Main function to start the application
 */
async function main()
⋮----
// Initial sync from REST API
⋮----
// Setup WebSocket event handlers
⋮----
//console.log(new Date(), 'Update:', data.topic);
⋮----
// Handle position updates
⋮----
// Handle order updates
⋮----
// Handle wallet updates
⋮----
// After reconnection, re-sync state from REST API to ensure it's up to date
⋮----
// Subscribe to private topics for linear perpetual futures
⋮----
// Setup periodic sync (as a backup to ensure state consistency)
⋮----
/**
 * Handle position update events from WebSocket
 */
function handlePositionUpdate(data: BybitWebSocketPosition)
⋮----
// Handle position close
⋮----
//console.log(new Date(), `Position closed for ${position.symbol} ${positionSide}`);
⋮----
// Handle position update
⋮----
/**
 * Handle order update events from WebSocket
 */
function handleOrderUpdate(data: BybitWebSocketOrder)
⋮----
// Update order in state
⋮----
/**
 * Handle wallet update events from WebSocket
 */
function handleWalletUpdate(data: BybitWebSocketWallet)
⋮----
// Update total wallet balance
⋮----
// Log additional wallet information
⋮----
// Log coin-specific information if available
⋮----
/**
 * Maps Bybit REST order to internal EngineOrder format
 */
function mapBybitRestOrderToEngineOrder(order: any): EngineOrder
⋮----
/**
 * Maps Bybit order status to Engine order status
 */
function mapBybitOrderStatusToEngineStatus(bybitStatus: string): EngineOrder['status']
⋮----
return 'NEW'; // Untriggered orders are treated as NEW in our system
⋮----
return 'CANCELLED'; // We don't have a specific status for partially filled canceled
⋮----
return 'NEW'; // Triggered orders become NEW orders
⋮----
return 'REJECTED'; // Default to REJECTED for unknown statuses
⋮----
/**
 * Maps Bybit WebSocket order to internal EngineOrder format
 */
function mapBybitWsOrderToEngineOrder(order: WSAccountOrderV5): EngineOrder
⋮----
/**
 * Maps Bybit REST position to internal EngineSimplePosition format
 */
function mapBybitRestPositionToEnginePosition(pos: any): EngineSimplePosition
⋮----
/**
 * Maps Bybit WebSocket position to internal EngineSimplePosition format
 */
function mapBybitWsPositionToEnginePosition(pos: WSPositionV5): EngineSimplePosition
⋮----
/**
 * Print account state summary
 */
function printAccountSummary()
⋮----
// Command to print summary when requested
⋮----
// Start the application
⋮----
// Bybit websocket types
interface BybitWebSocketBase {
  id: string;
  topic: string;
  creationTime: number;
}
⋮----
interface BybitCoinInfo {
  coin: string;
  equity: string;
  usdValue: string;
  walletBalance: string;
  free?: string;
  locked?: string;
  spotHedgingQty?: string;
  borrowAmount: string;
  availableToBorrow: string;
  availableToWithdraw: string;
  accruedInterest: string;
  totalOrderIM: string;
  totalPositionIM: string;
  totalPositionMM: string;
  unrealisedPnl: string;
  cumRealisedPnl: string;
  bonus?: string;
  collateralSwitch?: boolean;
  marginCollateral?: boolean;
}
⋮----
interface BybitWalletData {
  accountType: string;
  accountLTV: string;
  accountIMRate: string;
  accountMMRate: string;
  totalEquity: string;
  totalWalletBalance: string;
  totalMarginBalance: string;
  totalAvailableBalance: string;
  totalPerpUPL: string;
  totalInitialMargin: string;
  totalMaintenanceMargin: string;
  coin: BybitCoinInfo[];
}
⋮----
interface BybitWebSocketPosition extends BybitWebSocketBase {
  data: WSPositionV5[];
}
⋮----
interface BybitWebSocketOrder extends BybitWebSocketBase {
  data: WSAccountOrderV5[];
}
⋮----
interface BybitWebSocketWallet extends BybitWebSocketBase {
  data: BybitWalletData[];
}

================
File: .gitignore
================
# compiled output
/dist
/node_modules
localtest.sh
repomix.sh

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.npmrc

================
File: .nvmrc
================
v22.11.0

================
File: tsconfig.cjs.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "commonjs",
    "outDir": "dist/cjs",
    "target": "esnext"
  },
  "include": ["src/**/*.*"]
}

================
File: tsconfig.esm.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "esnext",
    "outDir": "dist/mjs",
    "target": "esnext"
  },
  "include": ["src/**/*.*"]
}

================
File: src/lib/types/order.ts
================
// Add new type for orders
export interface EngineOrder {
    exchangeOrderId: string;
    customOrderId: string;
    symbol: string;
    orderSide: 'BUY' | 'SELL';
    positionSide: 'LONG' | 'SHORT' | 'NONE';
    orderType: 'LIMIT' | 'MARKET' | 'STOP' | 'STOP_MARKET' | 'TAKE_PROFIT' | 'TAKE_PROFIT_MARKET' | 'TRAILING_STOP_MARKET';
    status: 'NEW' | 'PARTIALLY_FILLED' | 'FILLED' | 'CANCELLED' | 'EXPIRED' | 'REJECTED' | 'PENDING_CANCEL';
    price: number;
    originalQuantity: number;
    executedQuantity: number;
    averagePrice: number;
    createdAtMs: number;
    updatedAtMs: number;
    isreduceOnly?: boolean;
  }

================
File: src/index.ts
================


================
File: src/lib/types/position.ts
================
/** Returns a union type from Object.values(T) */
export type ValueOf<T> = T[keyof T];
⋮----
/**
 * The side this position is for (use NONE if position isn't active, though typically you would simply not store a "position" if it isn't active anymore)
 */
⋮----
export type EnginePositionSide = ValueOf<typeof ENGINE_POSITION_SIDE>;
⋮----
/** The "position side" this specific order should target (use BOTH for one-way trading) */
⋮----
export type EngineOrderPositionSide = ValueOf<
  typeof ENGINE_ORDER_POSITION_SIDE
>;
⋮----
export interface EngineSimplePosition {
  symbol: string;
  timestampMs: number;
  positionSide: EnginePositionSide;
  /** More of an internal reference to how this position is stored */
  orderPositionSide: EngineOrderPositionSide;
  positionPrice: number;
  assetQty: number;
  value: number;
  /** Unrealised profit or loss in quote value */
  valueUpnl: number;
  /** Margin value allocated to positon, considering leverage */
  marginValue: number;
  liquidationPrice: number;
  stopLossPrice: number | undefined;
  takeProfitPrice: number | undefined;
}
⋮----
/** More of an internal reference to how this position is stored */
⋮----
/** Unrealised profit or loss in quote value */
⋮----
/** Margin value allocated to positon, considering leverage */

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "baseUrl": "src",
    "noEmitOnError": true,
    "declaration": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": false,
    "inlineSourceMap": false,
    "lib": ["esnext"],
    "listEmittedFiles": false,
    "listFiles": false,
    "moduleResolution": "node",
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "pretty": true,
    "removeComments": false,
    "resolveJsonModule": true,
    "rootDir": "src",
    "skipLibCheck": false,
    "sourceMap": true,
    "strict": true,
    "strictNullChecks": true,
    "types": ["node", "jest"],
    "module": "commonjs",
    "outDir": "dist/cjs",
    "target": "esnext"
  },
  "compileOnSave": true,
  "exclude": ["node_modules", "dist", "test", "examples"],
  "include": ["src/**/*.*"]
}

================
File: examples/binance-futures-usdm.ts
================
import {
  DefaultLogger,
  isWsFormattedFuturesUserDataAccountUpdate,
  isWsFormattedFuturesUserDataEvent,
  isWsFormattedFuturesUserDataTradeUpdateEvent,
  USDMClient,
  WebsocketClient,
  WsMessageFuturesUserDataAccountUpdateFormatted,
  WsMessageFuturesUserDataTradeUpdateEventFormatted
} from 'binance';
⋮----
import {
  AccountStateStore,
} from '../src/AccountStateStore.js';
import { EngineOrder } from '../src/lib/types/order.js';
import {
  EngineSimplePosition,
} from '../src/lib/types/position.js';
⋮----
// Create REST client
⋮----
// Create account state store
⋮----
// Configure logger
⋮----
// Uncomment to see more detailed logs
// console.log(JSON.stringify({ msg, context }));
⋮----
// Create WebSocket client
⋮----
/**
 * Syncs the account state by fetching positions and orders from REST API
 */
async function syncPositionsFromREST()
⋮----
// Clear existing positions and orders from state
⋮----
// Fetch account information to get balance
⋮----
// Fetch all positions
⋮----
// Filter active positions (non-zero position amount)
⋮----
// Update state with active positions
⋮----
// Fetch all open orders
⋮----
// Update state with open orders
⋮----
// Summary of active positions and orders
⋮----
/**
 * Main function to start the application
 */
async function main()
⋮----
// Initial sync from REST API
⋮----
// Setup WebSocket event handlers
⋮----
// Handle different types of user data events
⋮----
// After reconnection, re-sync state from REST API to ensure it's up to date
⋮----
// Subscribe to user data stream
⋮----
// Setup periodic sync (as a backup to ensure state consistency)
⋮----
/**
 * Handle account update events from WebSocket
 */
function handleAccountUpdate(data: WsMessageFuturesUserDataAccountUpdateFormatted )
⋮----
// Update balance if available
⋮----
// Update positions
⋮----
// Handle position close
⋮----
// Normalize position side (BOTH to LONG/SHORT)
⋮----
// Handle position update
⋮----
/**
 * Maps Binance USDM Futures order to internal EngineOrder format
 */
function mapBinanceRestOrderToEngineOrder(order: any): EngineOrder
⋮----
/**
 * Maps Binance USDM Futures WebSocket order update to internal EngineOrder format
 */
function mapBinanceWsOrderToEngineOrder(order: any): EngineOrder
⋮----
/**
 * Maps Binance USDM Futures position from REST API to internal EngineSimplePosition format
 */
function mapBinanceRestPositionToEnginePosition(pos: any): EngineSimplePosition
⋮----
// Handle BOTH position side (convert to LONG or SHORT based on amount)
⋮----
/**
 * Maps Binance USDM Futures position from WebSocket to internal EngineSimplePosition format
 */
function mapBinanceWsPositionToEnginePosition(pos: any, transactionTime: number): EngineSimplePosition
⋮----
// Handle position side (BOTH to LONG/SHORT)
⋮----
/**
 * Handle order update events from WebSocket
 */
function handleOrderUpdate(data: WsMessageFuturesUserDataTradeUpdateEventFormatted)
⋮----
// Update order in state
⋮----
/**
 * Print account state summary
 */
function printAccountSummary()
⋮----
// Command to print summary when requested
⋮----
// Start the application

================
File: examples/package.json
================
{
    "name": "accountstate-examples",
    "private": true,
    "type": "module",
    "scripts": {
        "start:binance": "ts-node --esm binance-futures-usdm.ts"
    },
    "dependencies": {
        "binance": "^2.15.22",
        "bybit-api": "^4.1.13",
        "dotenv": "^16.6.1"
    }
}

================
File: src/AccountStateStore.ts
================
import { IncomingPriceEvent } from './lib/types/events.js';
import { EngineOrder } from './lib/types/order.js';
import {
  EnginePositionSide,
  EngineSimplePosition,
} from './lib/types/position.js';
import { getUnrealisedPNL } from './util/math.js';
⋮----
/**
 * This abstraction layer is a state cache for account state (so we know what changed when an event comes in).
 *
 * Since it's mostly a cache of information also available on the exchange (via a REST API call), none of it needs to be persisted.
 *
 * EXCEPT the following, which cannot be derived from the exchange:
 * - accountPositionMetadata - an object representing information about a position, per symbol
 *
 * This "accountPositionMetadata" can be any additional info to store about this symbol's position(s). A good place to store custom info.
 */
export class AccountStateStore<
TEnginePositionMetadata extends object = Record<string, unknown>,
⋮----
// symbol:leverageValue
⋮----
// per symbol, per side, cache a copy of the position state
⋮----
// per symbol, store some state related to this position (e.g. which leader caused this pos to open)
// if a leader opens any position on any side on a symbol,
// only that leader can do anything on that symbol until the position is closed again
⋮----
// Store all active orders, keyed by "endineOrder.exchangeOrderId"
⋮----
dumpLogState(): void
⋮----
/**
   * Pass a price update event to recalculate price-sensitive position state (such as UPNL)
   */
public processPriceEvent(event: IncomingPriceEvent): void
⋮----
/**
   * Return some loggable summary state. Takes the last seen price event into account, when looking at position upnl.
   *
   * Don't rely on this too much, it's a rushed implementation
   */
public getSessionSummary(startingBalance: number)
⋮----
/**
   * Utility method to check if metadata was recently changed (and hasn't been persisted yet)
   */
isPendingPersist()
⋮----
/**
   * Internally mark that metadata recently changed (and should be persisted)
   *
   * After you've persisted it somewhere, you should set this back to "false".
   */
setIsPendingPersist(value: boolean): void
⋮----
setWalletBalance(bal: number): void
⋮----
getWalletBalance(): number
⋮----
/**
   * Overwrites "previous balance" with current balance. Can be used to track balance changes before/after events
   */
storePreviousBalance(): void
⋮----
getPreviousBalance(): number
⋮----
getAllPositions(): EngineSimplePosition[]
⋮----
/**
   * Recalculate and return counters for the total number of positions opened (hedged positions count as 2)
   * @returns
   */
getTotalActivePositions():
⋮----
/**
   * @returns a cached count on the total number of positions that have both a long and a short open
   */
getTotalHedgedPositions(): number
⋮----
isSymbolSideInPosition(
    symbol: string,
    positionSide: EnginePositionSide,
): boolean
⋮----
/** Returns true if any side has a position for this symbol */
isSymbolInAnyPosition(symbol: string): boolean
⋮----
isDualPositionMode()
setSymbolLeverage(symbol: string, leverage: number): void
⋮----
getSymbolLeverage(symbol: string): number | undefined
⋮----
getSymbolLeverageCache()
⋮----
private assertInitialStateActivePosition(symbol: string): void
getActivePosition(
    symbol: string,
    side: EnginePositionSide,
): EngineSimplePosition | undefined
⋮----
setActivePosition(
    symbol: string,
    side: EnginePositionSide,
    newState: EngineSimplePosition,
): void
⋮----
deleteActivePosition(symbol: string, side: EnginePositionSide): void
⋮----
/** Overwrite the full metadata store. This should be keyed by symbol! */
setAllSymbolMetadata(data: typeof this.accountPositionMetadata): void
⋮----
/** Return position metadata for all symbols */
getAllSymbolMetadata(): typeof this.accountPositionMetadata
⋮----
/** Return a list of symbols with any metadata stored */
getSymbolsWithMetadata(): string[]
⋮----
/** Return metadata for one symbol */
getSymbolMetadata(symbol: string): TEnginePositionMetadata | undefined
⋮----
/** Overwrite the full state for a symbol's metadata */
setSymbolMetadata(
    symbol: string,
    data: TEnginePositionMetadata,
): TEnginePositionMetadata
⋮----
deletePositionMetadata(symbol: string): void
⋮----
/**
   * Set one value in this symbol's metadata state.
   *
   * Warning: make sure to set initial metadata (via setSymbolMetadata()) before trying to use this, or it will throw an error!
   */
setSymbolMetadataValue<TMetadataKey extends keyof TEnginePositionMetadata>(
    symbol: string,
    key: TMetadataKey,
    newValue: TEnginePositionMetadata[TMetadataKey],
): TEnginePositionMetadata
⋮----
/**
   * Get all orders
   */
getOrders(): EngineOrder[]
⋮----
/**
   * Get all active orders
   */
getActiveOrders(): EngineOrder[]
⋮----
/**
   * Get orders for a specific symbol
   */
getOrdersForSymbol(symbol: string): EngineOrder[]
⋮----
/**
   * Get orders for a specific symbol and side
   */
getOrdersForSymbolSide(symbol: string, side: 'BUY' | 'SELL'): EngineOrder[]
⋮----
/**
   * Get a specific order by ID
   */
getOrder(orderId: string): EngineOrder | undefined
⋮----
/**
   * Upsert an active order into the state store
   * Main entry point for order state updates
   * Only keeps active and partially filled orders in state
   * Deletes orders if they are not longer active(cancelled, filled, expired, etc)
   */
upsertActiveOrder(order: EngineOrder): void
⋮----
// Only store active or partially filled orders
⋮----
// Remove order if it's no longer active
⋮----
/**
   * Remove an order from tracking 
   */
deleteOrder(orderId: string): void
⋮----
/**
   * Clear all orders
   */
clearAllOrders(): void
⋮----
/**
   * Get orders by status
   */
getOrdersByStatus(status: EngineOrder['status']): EngineOrder[]
⋮----
/**
   * Get orders by type
   */
getOrdersByType(orderType: EngineOrder['orderType']): EngineOrder[]
⋮----
/**
   * Get all orders sorted by orderId
   * @param ascending - true for ascending order, false for descending
   */
getOrdersSortedById(ascending: boolean = true): EngineOrder[]
⋮----
/**
   * Get all orders sorted by symbol
   * @param ascending - true for ascending order, false for descending
   */
getOrdersSortedBySymbol(ascending: boolean = true): EngineOrder[]
⋮----
/**
   * Get all orders sorted by price
   * @param ascending - true for ascending order, false for descending
   */
getOrdersSortedByPrice(ascending: boolean = true): EngineOrder[]
⋮----
/**
   * Get orders for a specific symbol sorted by price
   * @param symbol - The symbol to filter orders for
   * @param ascending - true for ascending order, false for descending
   */
getOrdersForSymbolSortedByPrice(symbol: string, ascending: boolean = true): EngineOrder[]
⋮----
/**
   * Get orders for a specific symbol and side sorted by price
   * @param symbol - The symbol to filter orders for
   * @param side - The side to filter orders for (BUY/SELL)
   * @param ascending - true for ascending order, false for descending
   */
getOrdersForSymbolSideSortedByPrice(
    symbol: string, 
    side: 'BUY' | 'SELL',
    ascending: boolean = true
): EngineOrder[]
⋮----
/**
   * Get orders sorted by timestamp
   * @param ascending - true for ascending order (oldest first), false for descending (newest first)
   */
getOrdersSortedByTimestamp(ascending: boolean = true): EngineOrder[]

================
File: README.md
================
# Typescript Account State Store for Trading Applications

[![Build & Test](https://github.com/tiagosiebler/accountstate/actions/workflows/test.yml/badge.svg)](https://github.com/tiagosiebler/accountstate/actions/workflows/test.yml)
[![npm version](https://img.shields.io/npm/v/accountstate)][1]
[![npm size](https://img.shields.io/bundlephobia/min/accountstate/latest)][1]
[![npm downloads](https://img.shields.io/npm/dt/accountstate)][1]
[![last commit](https://img.shields.io/github/last-commit/tiagosiebler/accountstate)][1]
[![Telegram](https://img.shields.io/badge/chat-on%20telegram-blue.svg)](https://t.me/nodetraders)

[1]: https://www.npmjs.com/package/accountstate

A TypeScript utility class for managing cryptocurrency exchange account state in-memory. Designed for trading bots, portfolio trackers, and any application that needs to maintain real-time account state across positions, orders, and balances.

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Best Practices](#best-practices)
- [Quick Start](#quick-start)
- [Core API](#core-api)
  - [Balance Management](#balance-management)
  - [Position Management](#position-management)
  - [Order Management](#order-management)
  - [Leverage Management](#leverage-management)
  - [Price Updates & P&L](#price-updates--pl)
- [Custom Metadata](#custom-metadata)
- [Persistence](#persistence)
- [Running Examples](#running-examples)
- [Contributions & Thanks](#contributions--thanks)
- [License](#license)

## Features

- **Account Balance Tracking** - Monitor wallet balance changes
- **Position Management** - Track long/short positions with real-time P&L
- **Order State Management** - Monitor active, filled, and cancelled orders
- **Symbol-based Organization** - Organize data by trading pairs
- **Custom Metadata Storage** - Store custom data per symbol/position
- **Exchange Agnostic** - Works with any exchange (Binance, Bybit, etc.)
- **Persistence Ready** - Built-in persistence hooks for custom storage
- **TypeScript Support** - Full type safety with generics

## Installation

```bash
npm install accountstate
# or
yarn add accountstate
```

## Best Practices

1. **Initial Sync**: Always sync from REST API before starting WebSocket streams
2. **Reconnection Handling**: Re-sync state after WebSocket reconnections
3. **Error Handling**: Implement proper error handling for API calls
4. **Persistence**: Use persistence for custom metadata that can't be restored
5. **Performance**: Use the built-in filtering and sorting methods for efficiency
6. **Type Safety**: Define custom metadata interfaces for better type safety

## Quick Start

```typescript
import { AccountStateStore } from 'accountstate';

// Create a new account state store
const accountState = new AccountStateStore();

// Set wallet balance
accountState.setWalletBalance(10000);

// Track a position
accountState.setActivePosition('BTCUSDT', 'LONG', {
  symbol: 'BTCUSDT',
  timestampMs: Date.now(),
  positionSide: 'LONG',
  orderPositionSide: 'LONG',
  positionPrice: 45000,
  assetQty: 0.1,
  value: 4500,
  valueUpnl: 0,
  liquidationPrice: 40000,
  marginValue: 4500,
});

// Track an order
accountState.upsertActiveOrder({
  exchangeOrderId: '12345',
  customOrderId: 'my-order-1',
  symbol: 'BTCUSDT',
  orderSide: 'BUY',
  orderType: 'LIMIT',
  positionSide: 'LONG',
  status: 'NEW',
  price: 44000,
  originalQuantity: 0.05,
  executedQuantity: 0,
  averagePrice: 0,
  createdAtMs: Date.now(),
  updatedAtMs: Date.now(),
  isreduceOnly: false,
});

// Get account summary
const summary = accountState.getSessionSummary(10000);
console.log('Account Summary:', summary);
```

Or, check examples in the [./examples](./examples) folder.

## Core API

### Balance Management

```typescript
// Set and get wallet balance
accountState.setWalletBalance(10000);
const balance = accountState.getWalletBalance(); // 10000

// Track balance changes
accountState.storePreviousBalance();
accountState.setWalletBalance(10500);
const previousBalance = accountState.getPreviousBalance(); // 10000
```

### Position Management

```typescript
// Check if symbol has any position
const hasPosition = accountState.isSymbolInAnyPosition('BTCUSDT');

// Check specific side position
const hasLongPosition = accountState.isSymbolSideInPosition('BTCUSDT', 'LONG');

// Get specific position
const longPosition = accountState.getActivePosition('BTCUSDT', 'LONG');

// Get all positions
const allPositions = accountState.getAllPositions();

// Get position counts
const { total, totalHedged } = accountState.getTotalActivePositions();

// Delete a position
accountState.deleteActivePosition('BTCUSDT', 'LONG');
```

### Order Management

```typescript
// Get all orders
const allOrders = accountState.getOrders();

// Get active orders only
const activeOrders = accountState.getActiveOrders();

// Get orders for specific symbol
const btcOrders = accountState.getOrdersForSymbol('BTCUSDT');

// Get orders for symbol and side
const btcBuyOrders = accountState.getOrdersForSymbolSide('BTCUSDT', 'BUY');

// Get specific order
const order = accountState.getOrder('12345');

// Get orders by status
const newOrders = accountState.getOrdersByStatus('NEW');

// Get orders sorted by price
const ordersByPrice = accountState.getOrdersSortedByPrice(true); // ascending

// Clear all orders
accountState.clearAllOrders();
```

### Leverage Management

```typescript
// Set symbol leverage
accountState.setSymbolLeverage('BTCUSDT', 10);

// Get symbol leverage
const leverage = accountState.getSymbolLeverage('BTCUSDT'); // 10

// Get all leverage settings
const allLeverage = accountState.getSymbolLeverageCache();
```

### Price Updates & P&L

```typescript
// Process price update to recalculate unrealized P&L
accountState.processPriceEvent({
  symbol: 'BTCUSDT',
  price: 46000,
  timestamp: Date.now(),
});

// Get session summary with P&L calculations
const summary = accountState.getSessionSummary(startingBalance);
console.log('Realized P&L:', summary.account.pnlState.realisedPnl);
console.log('Unrealized P&L:', summary.account.pnlState.unrealisedPnl);
```

## Custom Metadata

### Custom data

This storage class also supports per-symbol "metadata". This is a key:value object you can use to store any information related to that symbol's position.

This is typically custom data that an exchange might not have any knowledge of.

Some examples:

- How many entries have happened on the short side of a symbol's position.
- When did this position first open.
- What state is the trailing SL mechanism in.
- What price did the last position for this symbol close.

```typescript
// Define your metadata type
interface MyPositionMetadata {
  leaderId: string;
  entryCount: number;
  lastEntryPrice: number;
  strategy: string;
}

// Create store with custom metadata type
const accountState = new AccountStateStore<MyPositionMetadata>();

// Set metadata for a symbol
accountState.setSymbolMetadata('BTCUSDT', {
  leaderId: 'trader-123',
  entryCount: 3,
  lastEntryPrice: 45000,
  strategy: 'DCA',
});

// Get metadata
const metadata = accountState.getSymbolMetadata('BTCUSDT');

// Update specific metadata value
accountState.setSymbolMetadataValue('BTCUSDT', 'entryCount', 4);

// Get all symbols with metadata
const symbolsWithMetadata = accountState.getSymbolsWithMetadata();

// Delete metadata
accountState.deletePositionMetadata('BTCUSDT');
```

## Persistence

The primary purpose of this module is to cache this state in-memory. Most of this can easily be fetched via the REST API, so persistence for the majority of this data is no concern.

However, the concept of per-symbol "metadata" is a custom one that cannot be easily restored once lost. If you use any of the metadata-related set/delete methods in the module, `isPendingPersist()` will automatically be set to return `true`.

This is a good way to check if there's a state change to persist somewhere, but it's up to you to implement the persistence mechanism based on your own needs. One way is to debounce an action to `getAllSymbolMetadata()`, persist it somewhere, and finally call `setIsPendingPersist(false)`.

There's no wrong way to do this. Here's a high level example that extends the account state store to automatically persist to Redis on a timer, if the stored metadata changed:

```typescript
const PERSIST_ACCOUNT_POSITION_METADATA_EVERY_MS = 250;

export interface EnginePositionMetadata {
  leaderId: string;
  leaderName: string;
  entryCountLong: number;
  entryCountShort: number;
}

/**
 * This abstraction layer extends the open source "account state store" class,
 * adding a persistence mechanism so nothing is lost after restart.
 *
 * Data is stored in Redis, keyed by the accountId.
 *
 * The RedisPersistanceAPI is a custom implementation around the ioredis client.
 */
export class PersistedAccountStateStore extends AccountStateStore<EnginePositionMetadata> {
  private redisAPI: RedisPersistanceAPI<'positionMetadata'>;

  private didRestorePositionMetadata = false;

  private accountId: string;

  constructor(accountId: string, redisAPI: RedisPersistanceAPI) {
    super();

    this.redisAPI = redisAPI;
    this.accountId = accountId;

    /** Start the persistence timer and also fetch any initial state, if any is found **/
    this.startPersistPositionMetadataTimer();
  }

  /** Call this during bootstrap to ensure we've rehydrated before resuming */
  async restorePersistedData(): Promise<void> {
    // Query persisted position metadata from redis
    const storedDataResult = await this.redisAPI.fetchJSONForAccountKey(
      'positionMetadata',
      this.accountId,
    );

    if (storedDataResult?.data && typeof storedDataResult.data === 'object') {
      this.setAllSymbolMetadata(storedDataResult.data);
    } else {
      console.log(
        `No state data in redis for "${this.accountId}" - nothing to restore`,
      );
    }

    // Overwrite local store with restored data
    this.didRestorePositionMetadata = true;
  }

  private startPersistPositionMetadataTimer(): void {
    setInterval(async () => {
      if (!this.didRestorePositionMetadata) {
        await this.restorePersistedData();
      }

      if (!this.isPendingPersist()) {
        return;
      }

      try {
        this.setIsPendingPersist(false);
        await this.redisAPI.writeJSONForAccountKey(
          'positionMetadata',
          this.accountId,
          this.getAllSymbolMetadata(),
        );

        console.log(`Saved position metadata to redis`);
      } catch (e) {
        console.error(
          `Exception writing position metadata to redis: ${sanitiseError(e)}`,
        );
        this.setIsPendingPersist(true);
      }
    }, PERSIST_ACCOUNT_POSITION_METADATA_EVERY_MS);
  }
}
```

## Running Examples

The repository includes complete working examples for popular exchanges. You can find them in the [./examples](./examples) folder.

### Binance Futures

1. Create `.env` file:

   ```
   BINANCE_API_KEY=your_api_key
   BINANCE_API_SECRET=your_api_secret
   ```

2. Run example:
   ```bash
   tsx examples/binance-futures-usdm.ts
   ```

### Bybit Futures

1. Create `.env` file:

   ```
   BYBIT_API_KEY=your_api_key
   BYBIT_API_SECRET=your_api_secret
   ```

2. Run example:
   ```bash
   tsx examples/bybit-futures.ts
   ```

All examples demonstrate:

- Initial state synchronization from REST APIs
- Real-time updates via WebSocket
- Automatic reconnection handling
- State consistency maintenance
- Account summary reporting

<!-- template_contributions -->

## Contributions & Thanks

Have my projects helped you? Share the love, there are many ways you can show your thanks:

- Star & share my projects.
- Are my projects useful? Sponsor me on Github and support my effort to maintain & improve them: https://github.com/sponsors/tiagosiebler
- Have an interesting project? Get in touch & invite me to it.
- Or buy me all the coffee:
  - ETH(ERC20): `0xA3Bda8BecaB4DCdA539Dc16F9C54a592553Be06C` <!-- metamask -->

<!-- template_contributions_end -->

### Contributions & Pull Requests

Contributions are encouraged, I will review any incoming pull requests. See the issues tab for todo items.

<!-- template_related_projects -->

## Related projects

Check out my related JavaScript/TypeScript/Node.js projects:

- Try my REST API & WebSocket SDKs:
  - [Bybit-api Node.js SDK](https://www.npmjs.com/package/bybit-api)
  - [Okx-api Node.js SDK](https://www.npmjs.com/package/okx-api)
  - [Binance Node.js SDK](https://www.npmjs.com/package/binance)
  - [Gateio-api Node.js SDK](https://www.npmjs.com/package/gateio-api)
  - [Bitget-api Node.js SDK](https://www.npmjs.com/package/bitget-api)
  - [Kucoin-api Node.js SDK](https://www.npmjs.com/package/kucoin-api)
  - [Coinbase-api Node.js SDK](https://www.npmjs.com/package/coinbase-api)
  - [Bitmart-api Node.js SDK](https://www.npmjs.com/package/bitmart-api)
- Try my misc utilities:
  - [OrderBooks Node.js](https://www.npmjs.com/package/orderbooks)
  - [Crypto Exchange Account State Cache](https://www.npmjs.com/package/accountstate)
- Check out my examples:
  - [awesome-crypto-examples Node.js](https://github.com/tiagosiebler/awesome-crypto-examples)
  <!-- template_related_projects_end -->

<!-- template_star_history -->

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=tiagosiebler/bybit-api,tiagosiebler/okx-api,tiagosiebler/binance,tiagosiebler/bitget-api,tiagosiebler/bitmart-api,tiagosiebler/gateio-api,tiagosiebler/kucoin-api,tiagosiebler/coinbase-api,tiagosiebler/orderbooks,tiagosiebler/accountstate,tiagosiebler/awesome-crypto-examples&type=Date)](https://star-history.com/#tiagosiebler/bybit-api&tiagosiebler/okx-api&tiagosiebler/binance&tiagosiebler/bitget-api&tiagosiebler/bitmart-api&tiagosiebler/gateio-api&tiagosiebler/kucoin-api&tiagosiebler/coinbase-api&tiagosiebler/orderbooks&tiagosiebler/accountstate&tiagosiebler/awesome-crypto-examples&Date)

<!-- template_star_history_end -->

## License

MIT License - see LICENSE file for details.

================
File: package.json
================
{
  "name": "accountstate",
  "version": "0.0.30",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tiagosiebler/accountstate.git"
  },
  "description": "Simple, reusable, in-memory account state store for working with exchange positions",
  "author": "tiagosiebler",
  "license": "ISC",
  "main": "dist/cjs/index.js",
  "module": "dist/mjs/index.js",
  "types": "dist/mjs/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/mjs/index.js",
      "require": "./dist/cjs/index.js",
      "types": "./dist/mjs/index.d.ts"
    }
  },
  "type": "module",
  "files": [
    "dist/*"
  ],
  "scripts": {
    "build": "rm -fr dist/* && tsc -p tsconfig.esm.json && tsc -p tsconfig.cjs.json && bash ./postBuild.sh",
    "build:old": "npm run clean && tsc --build tsconfig.build.json",
    "build:watch": "npm run clean && tsc --build tsconfig.build.json --watch",
    "prepareaaa": "npm run build",
    "clean": "tsc --build --clean tsconfig.build.json",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest --passWithNoTests",
    "testOther": "node --test --loader ts-node/esm src/**/*.test.ts",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {},
  "devDependencies": {
    "@types/jest": "^29.1.1",
    "@types/node": "^20.11",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "jest": "^29.1.1",
    "prettier": "^2.3.2",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.2.3",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  }
}





================================================================
End of Codebase
================================================================
